import * as commander from 'commander';
import { createReadStream, existsSync } from 'fs';
import { parse } from '@fast-csv/parse';
import chalk from 'chalk';
import { actionRunner, serializeError } from '../utils.js';
import { getAccessToken } from '../config.js';
import { createClaim } from '../forma.js';
import { claimParamsToCreateClaimOptions } from '../claims.js';
const command = new commander.Command();
const EXPECTED_HEADERS = [
    'category',
    'benefit',
    'amount',
    'merchant',
    'purchaseDate',
    'description',
    'receiptPath',
];
const readClaimsFromCsv = async (inputPath) => {
    const claims = [];
    return await new Promise((resolve, reject) => {
        createReadStream(inputPath, 'utf8')
            .pipe(parse({ headers: true }))
            .on('error', reject)
            .on('data', (row) => {
            const rowHeaders = Object.keys(row);
            if (rowHeaders.length !== EXPECTED_HEADERS.length ||
                !rowHeaders.every((header) => EXPECTED_HEADERS.includes(header))) {
                reject(new Error('Invalid CSV headers. Please use a template CSV generated by the `generate-template-csv` command.'));
            }
            claims.push(row);
        })
            .on('end', () => {
            resolve(claims);
        });
    });
};
command
    .name('submit-claims-from-csv')
    .description('Submit multiple Forms claims from a CSV. To generate a template CSV to fill in, use the `generate-template-csv` command.')
    .requiredOption('--input-path <input_path>', 'The path to the CSV to read claims from')
    .option('--access-token <access_token>', 'Access token used to authenticate with Forma')
    .action(actionRunner(async (opts) => {
    const accessToken = opts.accessToken ?? getAccessToken();
    if (!accessToken) {
        throw new Error("You aren't logged in to Forma. Please run `formanator login` first.");
    }
    if (!existsSync(opts.inputPath)) {
        throw new Error(`File '${opts.inputPath}' doesn't exist.`);
    }
    const claims = await readClaimsFromCsv(opts.inputPath);
    if (!claims.length) {
        throw new Error("Your CSV doesn't seem to contain any claims. Have you filled out the template?");
    }
    for (const [index, claim] of claims.entries()) {
        console.log(`Submitting claim ${index + 1}/${claims.length}`);
        try {
            const createClaimOptions = await claimParamsToCreateClaimOptions(claim, accessToken);
            await createClaim(createClaimOptions);
            console.log(chalk.green(`Successfully submitted claim ${index + 1}/${claims.length}`));
        }
        catch (e) {
            console.error(chalk.red(`Error submitting claim ${index + 1}/${claims.length}: ${serializeError(e)}`));
        }
    }
}));
export default command;
